// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simpletest.proto

#ifndef PROTOBUF_INCLUDED_simpletest_2eproto
#define PROTOBUF_INCLUDED_simpletest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_simpletest_2eproto 

namespace protobuf_simpletest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_simpletest_2eproto
namespace qtprotobufnamespace {
namespace tests {
class SimpleStringMessage;
class SimpleStringMessageDefaultTypeInternal;
extern SimpleStringMessageDefaultTypeInternal _SimpleStringMessage_default_instance_;
}  // namespace tests
}  // namespace qtprotobufnamespace
namespace google {
namespace protobuf {
template<> ::qtprotobufnamespace::tests::SimpleStringMessage* Arena::CreateMaybeMessage<::qtprotobufnamespace::tests::SimpleStringMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace qtprotobufnamespace {
namespace tests {

// ===================================================================

class SimpleStringMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qtprotobufnamespace.tests.SimpleStringMessage) */ {
 public:
  SimpleStringMessage();
  virtual ~SimpleStringMessage();

  SimpleStringMessage(const SimpleStringMessage& from);

  inline SimpleStringMessage& operator=(const SimpleStringMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleStringMessage(SimpleStringMessage&& from) noexcept
    : SimpleStringMessage() {
    *this = ::std::move(from);
  }

  inline SimpleStringMessage& operator=(SimpleStringMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleStringMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleStringMessage* internal_default_instance() {
    return reinterpret_cast<const SimpleStringMessage*>(
               &_SimpleStringMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleStringMessage* other);
  friend void swap(SimpleStringMessage& a, SimpleStringMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleStringMessage* New() const final {
    return CreateMaybeMessage<SimpleStringMessage>(NULL);
  }

  SimpleStringMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleStringMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleStringMessage& from);
  void MergeFrom(const SimpleStringMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleStringMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string testFieldString = 6;
  void clear_testfieldstring();
  static const int kTestFieldStringFieldNumber = 6;
  const ::std::string& testfieldstring() const;
  void set_testfieldstring(const ::std::string& value);
  #if LANG_CXX11
  void set_testfieldstring(::std::string&& value);
  #endif
  void set_testfieldstring(const char* value);
  void set_testfieldstring(const char* value, size_t size);
  ::std::string* mutable_testfieldstring();
  ::std::string* release_testfieldstring();
  void set_allocated_testfieldstring(::std::string* testfieldstring);

  // @@protoc_insertion_point(class_scope:qtprotobufnamespace.tests.SimpleStringMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr testfieldstring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_simpletest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleStringMessage

// string testFieldString = 6;
inline void SimpleStringMessage::clear_testfieldstring() {
  testfieldstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleStringMessage::testfieldstring() const {
  // @@protoc_insertion_point(field_get:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
  return testfieldstring_.GetNoArena();
}
inline void SimpleStringMessage::set_testfieldstring(const ::std::string& value) {
  
  testfieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
}
#if LANG_CXX11
inline void SimpleStringMessage::set_testfieldstring(::std::string&& value) {
  
  testfieldstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
}
#endif
inline void SimpleStringMessage::set_testfieldstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  testfieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
}
inline void SimpleStringMessage::set_testfieldstring(const char* value, size_t size) {
  
  testfieldstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
}
inline ::std::string* SimpleStringMessage::mutable_testfieldstring() {
  
  // @@protoc_insertion_point(field_mutable:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
  return testfieldstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleStringMessage::release_testfieldstring() {
  // @@protoc_insertion_point(field_release:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
  
  return testfieldstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleStringMessage::set_allocated_testfieldstring(::std::string* testfieldstring) {
  if (testfieldstring != NULL) {
    
  } else {
    
  }
  testfieldstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), testfieldstring);
  // @@protoc_insertion_point(field_set_allocated:qtprotobufnamespace.tests.SimpleStringMessage.testFieldString)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tests
}  // namespace qtprotobufnamespace

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_simpletest_2eproto
