function(generate_qtprotobuf)
    set(options)
    set(oneValueArgs OUT_DIR TARGET)
    set(multiValueArgs GENERATED_HEADERS EXCLUDE_HEADERS PROTO_FILES)
    cmake_parse_arguments(generate_qtprotobuf "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    set(QtProtobuf_GENERATED ${generate_qtprotobuf_TARGET}_qtprotobuf_gen PARENT_SCOPE)
    set(QtProtobuf_GENERATED ${generate_qtprotobuf_TARGET}_qtprotobuf_gen)

    set(GEN_TARGET ${generate_qtprotobuf_TARGET}_qtprotobuf_generate)

    if(NOT DEFINED QTPROTOBUF_EXECUTABLE)
        set(QTPROTOBUF_EXECUTABLE @QTPROTOBUF_EXECUTABLE_INSTALL@)
    endif()
    find_program(GO_EXECUTABLE "go")
    foreach(PROTO_FILE IN LISTS generate_qtprotobuf_PROTO_FILES)
        get_filename_component(BASE_DIR ${PROTO_FILE} DIRECTORY)
        set(PROTO_INCLUDES -I"${BASE_DIR}" ${PROTO_INCUDES})
        execute_process(COMMAND ${GO_EXECUTABLE} run ${PROTO_PARSER} ${PROTO_FILE} OUTPUT_VARIABLE GENERATED_HEADERS_PART ERROR_VARIABLE PARSER_ERROR)
        set(GENERATED_HEADERS ${GENERATED_HEADERS} ${GENERATED_HEADERS_PART})
    endforeach()

    #TODO: add globalenums by default. But it's better to verify if proto file contains any global enum
    set(GENERATED_HEADERS ${GENERATED_HEADERS} globalenums.h)

    #message("${PARSER_ERROR} Generated files list: ${GENERATED_HEADERS} ${GENERATED_HEADERS_PART}")

    if(DEFINED generate_qtprotobuf_GENERATED_HEADERS)
        set(GENERATED_HEADERS ${generate_qtprotobuf_GENERATED_HEADERS})
    endif()

    foreach(EXCLUDE_HEADER IN LISTS generate_qtprotobuf_EXCLUDE_HEADERS)
        list(REMOVE_ITEM GENERATED_HEADERS ${EXCLUDE_HEADER})
    endforeach()

    list(REMOVE_DUPLICATES GENERATED_HEADERS)
    
    if(NOT DEFINED generate_qtprotobuf_OUT_DIR)
        set(OUT_DIR ${CMAKE_CURRENT_BINARY_DIR})
    else()
        set(OUT_DIR ${generate_qtprotobuf_OUT_DIR})
    endif()

    file(MAKE_DIRECTORY ${OUT_DIR})

    unset(QTPROTOBUF_GENERATED_SOURCES)
    unset(QTPROTOBUF_GENERATED_HEADERS)
    foreach(GENERATED_HEADER IN LISTS GENERATED_HEADERS)
        get_filename_component(GENERATED_BASENAME ${GENERATED_HEADER} NAME_WE)

        list(APPEND QTPROTOBUF_GENERATED_SOURCES ${OUT_DIR}/${GENERATED_BASENAME}.cpp)
        list(APPEND QTPROTOBUF_GENERATED_HEADERS ${OUT_DIR}/${GENERATED_BASENAME}.h)
        set_property(SOURCE ${OUT_DIR}/${GENERATED_BASENAME}.cpp PROPERTY SKIP_AUTOMOC ON)
    endforeach()

    add_custom_command(
            OUTPUT ${QTPROTOBUF_GENERATED_SOURCES} ${QTPROTOBUF_GENERATED_HEADERS}
            COMMAND $<TARGET_FILE:protobuf::protoc>
                --plugin=protoc-gen-@GENERATOR_TARGET@=${QTPROTOBUF_EXECUTABLE}
                --@GENERATOR_TARGET@_out=${OUT_DIR}
                ${PROTO_INCLUDES}
                ${PROTO_FILES}
            WORKING_DIRECTORY ${OUT_DIR}
            DEPENDS ${PROTO_FILES} ${QTPROTOBUF_EXECUTABLE}
            COMMENT "Generating QtProtobuf ${generate_qtprotobuf_TARGET} sources..."
    )
    
    add_custom_target(${GEN_TARGET} DEPENDS ${QTPROTOBUF_GENERATED_SOURCES} ${QTPROTOBUF_GENERATED_HEADERS} ${PROTO_FILES})

    qt5_wrap_cpp(MOC_SOURCES ${QTPROTOBUF_GENERATED_HEADERS})
    list(APPEND GENERATED_SOURCES ${MOC_SOURCES})
    set_source_files_properties(${QTPROTOBUF_GENERATED_SOURCES} PROPERTIES GENERATED TRUE)
    add_library(${QtProtobuf_GENERATED} ${QTPROTOBUF_GENERATED_SOURCES} ${MOC_SOURCES})
    add_dependencies(${QtProtobuf_GENERATED} ${GEN_TARGET})
    target_include_directories(${QtProtobuf_GENERATED} PUBLIC ${OUT_DIR} PRIVATE ${Qt5Core_INCLUDE_DIRS}
        $<TARGET_PROPERTY:@QTPROTOBUF_COMMON_NAMESPACE@::QtProtobuf,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:@QTPROTOBUF_COMMON_NAMESPACE@::QtGrpc,INTERFACE_INCLUDE_DIRECTORIES> ${OUT_DIR})
endfunction()
 
