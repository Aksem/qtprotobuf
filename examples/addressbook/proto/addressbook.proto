/*
 * MIT License
 *
 * Copyright (c) 2019 Alexey Edelev <semlanik@gmail.com>
 *
 * This file is part of qtprotobuf project https://git.semlanik.org/semlanik/qtprotobuf
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

syntax="proto3";

package qtprotobuf.examples;

message PhoneNumber {
    uint32 countryCode = 1;
    repeated uint64 number = 2;
}

message Address {
    uint64 zipCode = 1;
    string streetAddress1 = 2;
    string streetAddress2 = 3;
    string state = 4;
    uint32 country = 5;
}

message Job {
    string title = 1;
    Address officeAddress = 2;
}

message Contact {
    enum PhoneType {
        Home = 0;
        Work = 1;
        Mobile = 2;
        Other = 3;
    };

    string firstName = 1;
    string lastName = 2;
    string middleName = 3;
    map<int32, PhoneNumber> phones = 4;
    Address address = 5;
    Job job = 6;
}

message Contacts {
    repeated Contact list = 1;
}

message SimpleResult {
    bool ok = 1;
}

message ListFrame {
    sint32 start = 1;
    sint32 end = 2;
}

service AddressBook {
    rpc addContact(Contact) returns (SimpleResult) {}
    rpc removeContact(Contact) returns (SimpleResult) {}
    rpc getContacts(ListFrame) returns (Contacts) {}
    rpc makeCall(Contact) returns (SimpleResult) {}
    rpc navigateTo(Address) returns (SimpleResult) {}
}
